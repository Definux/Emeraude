// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Emeraude Client Builder.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

import './types';

export class DogsServiceAgent {

    /**
     * DogsApiController/AddDog
     * @param {AddDogCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<MutationResult>}
     */
    addDog(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/dogs/add`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

export class EmptyServiceAgent {

    /**
     * EmptyApiController/ExampleAction
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    exampleAction(queryParams = null, headers = null) { 
        let url = new URL(`/api/empty/example`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * EmptyApiController/ComplexRequestTypeAction
     * @param {ComplexRequestCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<ComplexRequestResult>}
     */
    complexRequestTypeAction(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/empty/complex`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

export class EnumsServiceAgent {

    /**
     * EnumsApiController/GetEnumValueList
     * @param {string} enumTypeName
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<Array<EnumValueItem>>}
     */
    getEnumValueList(enumTypeName, queryParams = null, headers = null) { 
        let url = new URL(`/api/enums/${enumTypeName}`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * EnumsApiController/GetEnumValue
     * @param {string} enumTypeName
     * @param {number} value
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<EnumValueItem>}
     */
    getEnumValue(enumTypeName, value, queryParams = null, headers = null) { 
        let url = new URL(`/api/enums/${enumTypeName}/${value}`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

export class LoggerServiceAgent {

    /**
     * LoggerApiController/LogClientError
     * @param {LogFrontEndErrorCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    logClientError(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/logger/error`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

export class UsersServiceAgent {

    /**
     * UsersApiController/GetUserAvatarType
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<UserAvatarTypeResult>}
     */
    getUserAvatarType(queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/avatar/type`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/ChangeUserAvatar
     * @param {ChangeUserAvatarCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    changeUserAvatar(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/avatar/change`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/ChangeUserPassword
     * @param {ChangePasswordCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    changeUserPassword(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/password/change`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'PUT',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/ChangeUserName
     * @param {ChangeUserNameCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    changeUserName(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/name/change`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'PUT',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/GetCurrentUserExternalLoginProviders
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<GetUserExternalLoginProvidersResult>}
     */
    getCurrentUserExternalLoginProviders(queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/external-login-providers`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/RemoveCurrentUserExternalLoginProvider
     * @param {RemoveExternalLoginProviderCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    removeCurrentUserExternalLoginProvider(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/remove-external-login-provider`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/RequestChangeEmailForTheCurrentUser
     * @param {RequestChangeEmailCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    requestChangeEmailForTheCurrentUser(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/request-change-email`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    /**
     * UsersApiController/RequestResetPasswordForTheCurrentUser
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    requestResetPasswordForTheCurrentUser(queryParams = null, headers = null) { 
        let url = new URL(`/api/users/current/reset-password`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: null,
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

/**
 * @type {DogsServiceAgent}
 */
const dogsServiceAgent = new DogsServiceAgent();

/**
 * @type {EmptyServiceAgent}
 */
const emptyServiceAgent = new EmptyServiceAgent();

/**
 * @type {EnumsServiceAgent}
 */
const enumsServiceAgent = new EnumsServiceAgent();

/**
 * @type {LoggerServiceAgent}
 */
const loggerServiceAgent = new LoggerServiceAgent();

/**
 * @type {UsersServiceAgent}
 */
const usersServiceAgent = new UsersServiceAgent();

export {
  dogsServiceAgent,
  emptyServiceAgent,
  enumsServiceAgent,
  loggerServiceAgent,
  usersServiceAgent,
}