// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Emeraude Client Builder.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

/**
 * @typedef MutationResult
 * @property {string} mutatedEntityId
 * @property {boolean} succeeded
 */
export class MutationResult {
  constructor(mutatedEntityId, succeeded) {
    this.mutatedEntityId = mutatedEntityId;
    this.succeeded = succeeded;
  }
}

/**
 * @typedef AddDogCommand
 * @property {string} name
 * @property {number} type
 * @property {number} breed
 * @property {string} nullableGuid
 * @property {string} nullableTimeSpan
 */
export class AddDogCommand {
  constructor(name, type, breed, nullableGuid, nullableTimeSpan) {
    this.name = name;
    this.type = type;
    this.breed = breed;
    this.nullableGuid = nullableGuid;
    this.nullableTimeSpan = nullableTimeSpan;
  }
}

/**
 * @typedef SimpleResult
 * @property {boolean} succeeded
 */
export class SimpleResult {
  constructor(succeeded) {
    this.succeeded = succeeded;
  }
}

/**
 * @typedef ComplexRequestResult
 * @property {boolean} success
 * @property {PaginatedList} paginatedCollection
 */
export class ComplexRequestResult {
  constructor(success, paginatedCollection) {
    this.success = success;
    this.paginatedCollection = paginatedCollection;
  }
}

/**
 * @typedef PaginatedList
 * @property {Array<SomeResultItem>} items
 * @property {number} allItemsCount
 * @property {number} itemsCount
 * @property {number} pagesCount
 * @property {number} pageSize
 * @property {number} currentPage
 * @property {number} startRow
 */
export class PaginatedList {
  constructor(items, allItemsCount, itemsCount, pagesCount, pageSize, currentPage, startRow) {
    this.items = items;
    this.allItemsCount = allItemsCount;
    this.itemsCount = itemsCount;
    this.pagesCount = pagesCount;
    this.pageSize = pageSize;
    this.currentPage = currentPage;
    this.startRow = startRow;
  }
}

/**
 * @typedef SomeResultItem
 * @property {string} id
 * @property {string} name
 */
export class SomeResultItem {
  constructor(id, name) {
    this.id = id;
    this.name = name;
  }
}

/**
 * @typedef ComplexRequestCommand
 * @property {string} description
 * @property {Array<NestedComplexType>} nestedCollection
 */
export class ComplexRequestCommand {
  constructor(description, nestedCollection) {
    this.description = description;
    this.nestedCollection = nestedCollection;
  }
}

/**
 * @typedef NestedComplexType
 * @property {string} id
 * @property {Array<DeepNestedComplexType>} deepCollection
 */
export class NestedComplexType {
  constructor(id, deepCollection) {
    this.id = id;
    this.deepCollection = deepCollection;
  }
}

/**
 * @typedef DeepNestedComplexType
 * @property {string} name
 * @property {number} complexEnum
 */
export class DeepNestedComplexType {
  constructor(name, complexEnum) {
    this.name = name;
    this.complexEnum = complexEnum;
  }
}

/**
 * @typedef EnumValueItem
 * @property {string} name
 * @property {number} value
 * @property {string} key
 */
export class EnumValueItem {
  constructor(name, value, key) {
    this.name = name;
    this.value = value;
    this.key = key;
  }
}

/**
 * @typedef LogFrontEndErrorCommand
 * @property {string} stackTrace
 * @property {string} source
 * @property {string} method
 * @property {string} message
 */
export class LogFrontEndErrorCommand {
  constructor(stackTrace, source, method, message) {
    this.stackTrace = stackTrace;
    this.source = source;
    this.method = method;
    this.message = message;
  }
}

/**
 * @typedef UserAvatarTypeResult
 * @property {boolean} isDefault
 */
export class UserAvatarTypeResult {
  constructor(isDefault) {
    this.isDefault = isDefault;
  }
}

/**
 * @typedef ChangeUserAvatarCommand
 * @property {string} avatarFileBase64
 * @property {string} userId
 */
export class ChangeUserAvatarCommand {
  constructor(avatarFileBase64, userId) {
    this.avatarFileBase64 = avatarFileBase64;
    this.userId = userId;
  }
}

/**
 * @typedef ChangePasswordCommand
 * @property {string} userId
 * @property {string} currentPassword
 * @property {string} newPassword
 * @property {string} confirmedPassword
 */
export class ChangePasswordCommand {
  constructor(userId, currentPassword, newPassword, confirmedPassword) {
    this.userId = userId;
    this.currentPassword = currentPassword;
    this.newPassword = newPassword;
    this.confirmedPassword = confirmedPassword;
  }
}

/**
 * @typedef ChangeUserNameCommand
 * @property {string} userId
 * @property {string} newName
 */
export class ChangeUserNameCommand {
  constructor(userId, newName) {
    this.userId = userId;
    this.newName = newName;
  }
}

/**
 * @typedef GetUserExternalLoginProvidersResult
 * @property {Array<UserExternalLoginProvider>} providers
 */
export class GetUserExternalLoginProvidersResult {
  constructor(providers) {
    this.providers = providers;
  }
}

/**
 * @typedef UserExternalLoginProvider
 * @property {string} provider
 * @property {string} providerDisplayName
 */
export class UserExternalLoginProvider {
  constructor(provider, providerDisplayName) {
    this.provider = provider;
    this.providerDisplayName = providerDisplayName;
  }
}

/**
 * @typedef RemoveExternalLoginProviderCommand
 * @property {string} userId
 * @property {string} provider
 * @property {string} password
 */
export class RemoveExternalLoginProviderCommand {
  constructor(userId, provider, password) {
    this.userId = userId;
    this.provider = provider;
    this.password = password;
  }
}

/**
 * @typedef RequestChangeEmailCommand
 * @property {string} userId
 * @property {string} newEmail
 * @property {string} localCallbackUrl
 * @property {boolean} useLocalization
 */
export class RequestChangeEmailCommand {
  constructor(userId, newEmail, localCallbackUrl, useLocalization) {
    this.userId = userId;
    this.newEmail = newEmail;
    this.localCallbackUrl = localCallbackUrl;
    this.useLocalization = useLocalization;
  }
}

