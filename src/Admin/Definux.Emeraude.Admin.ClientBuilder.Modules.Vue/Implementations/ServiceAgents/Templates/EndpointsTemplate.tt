<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Definux.Emeraude.Admin.ClientBuilder.Models" #>
<#@ import namespace="Definux.Emeraude.Admin.ClientBuilder.Shared" #>
<#@ import namespace="Definux.Utilities.Extensions" #>
<#=ClientBuilderConstants.AutoGeneratedHeaderText #>

<# foreach (var classItem in (List<TypeDescription>)Session["Classes"]) { if (classItem.IsComplex) {#>
/**
 * @typedef <#=classItem.Name#>
<# foreach (var property in classItem.Properties) { #>
 * @property {<#=property.Type.JavaScriptTypeName#>} <#=property.Name.ToFirstLower()#>
<#}#>
 */
<# } } #>
<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>

export class <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent {
<# foreach (var endpoint in ((List<Endpoint>)Session["Endpoints"]).Where(x => x.ControllerName == controller).ToList()) { #>

    /**
     * <#=endpoint.ControllerName#>/<#=endpoint.ActionName#>
<#if (endpoint.Arguments.Count > 0) {foreach (var argument in endpoint.Arguments) { #>
     * @param {<#=argument.Type.JavaScriptTypeName#>} <#=argument.Name#>
<#}#>
<#}#>
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise}
     */
    <#=endpoint.ActionName.ToFirstLower()#>(<#=endpoint.ArgumentsListString#><#=string.IsNullOrEmpty(endpoint.ArgumentsListString) ? "" : ", "#>queryParams = null, headers = null) {<# var requestUrl = "`" + endpoint.Route.Replace("{", "${") + "`";#> 
        let url = new URL(<#=requestUrl#>, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
<#if (endpoint.MethodName.ToUpper() == "GET") {#>
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
<#}#>
<#if (endpoint.MethodName.ToUpper() == "POST") {#>
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: <#if (!string.IsNullOrEmpty(endpoint.ArgumentsListString)) { #>JSON.stringify(<#=endpoint.ComplexArgument.Name#>)<# } else {#>null<#}#>,
            credentials: 'include'
        })
            .then(response => response.json());
<#}#>
<#if (endpoint.MethodName.ToUpper() == "PUT") {#>
        return fetch(url, {
            method: 'PUT',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: <#if (!string.IsNullOrEmpty(endpoint.ArgumentsListString)) { #>JSON.stringify(<#=endpoint.ComplexArgument.Name#>)<# } else {#>null<#}#>,
            credentials: 'include'
        })
            .then(response => response.json());
<#}#>
<#if (endpoint.MethodName.ToUpper() == "DELETE") {#>
        return fetch(url, {
            method: 'DELETE',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(response => response.json());
<#}#>
    }
<# } #>
}
<# } #>
<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>

/**
 * @type {<#=controller.Replace("ApiController", string.Empty)#>ServiceAgent}
 */
export const <#=controller.Replace("ApiController", string.Empty).ToFirstLower()#>ServiceAgent = new <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent();
<# } #>