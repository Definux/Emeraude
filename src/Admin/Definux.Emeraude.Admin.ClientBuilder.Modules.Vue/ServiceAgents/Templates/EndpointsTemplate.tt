<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Definux.Emeraude.Admin.ClientBuilder.Models" #>
<#@ import namespace="Definux.Emeraude.Admin.ClientBuilder.Shared" #>
<#@ import namespace="Definux.Utilities.Extensions" #>
<#=ClientBuilderConstants.AutoGeneratedHeaderText #>

<# foreach (var classItem in (List<ClassDescription>)Session["Classes"]) { if (classItem.IsComplex) {#>
/**
 * @typedef <#=classItem.Name#>
<# foreach (var property in classItem.Properties) { #>
 * @property {<#=property.Type.JavaScriptTypeName#>} <#=property.Name.ToFirstLower()#>
<# } #>
 */

<# } } #>

class HttpClient {
    constructor() {
        this.requestHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
    }

    get(url) {
        return fetch(url, {
            method: 'GET',
            headers: this.requestHeaders,
            credentials: 'include'
        })
            .then(response => response.json());
    }

    post(url, body) {
        return fetch(url, {
            method: 'POST',
            headers: this.requestHeaders,
            body: JSON.stringify(body),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    put(url, body) {
        return fetch(url, {
            method: 'PUT',
            headers: this.requestHeaders,
            body: JSON.stringify(body),
            credentials: 'include'
        })
            .then(response => response.json());
    }

    delete(url, body = null) {
        return fetch(url, {
            method: 'DELETE',
            headers: this.requestHeaders,
            body: JSON.stringify(body),
            credentials: 'include'
        })
            .then(response => response.json());
    }
}

const httpClient = new HttpClient();

<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>

export class <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent {
<# foreach (var endpoint in ((List<Endpoint>)Session["Endpoints"]).Where(x => x.ControllerName == controller).ToList()) { #>

/**
 * <#=endpoint.ControllerName#>/<#=endpoint.ActionName#>
<#if (endpoint.Arguments.Count > 0) {
foreach (var argument in endpoint.Arguments) { #>
 * @param {<#=argument.Class.JavaScriptTypeName#>} <#=argument.Name#>
<#}#>
<#}#>
 * @returns {Promise}
 */
<#=endpoint.ActionName.ToFirstLower()#>(<#=endpoint.ArgumentsListString#>) {
	return httpClient.<#=endpoint.MethodName.ToLower()#>(`<#=endpoint.Route.Replace("{", "${")#>`<#if ((endpoint.MethodName.ToLower() == "post" || endpoint.MethodName.ToLower() == "put") && !string.IsNullOrEmpty(endpoint.ArgumentsListString)) { #>, <#=endpoint.ComplexArgument.Name#><# } #>);
}
<# } #>
}
<# } #>

<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>
/**
 * @type {<#=controller.Replace("ApiController", string.Empty)#>ServiceAgent}
 */
export const <#=controller.Replace("ApiController", string.Empty).ToFirstLower()#>ServiceAgent = new <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent();

<# } #>